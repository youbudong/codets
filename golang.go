package main

import (
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

func fileGo(dir, projectName string, schemas openapi3.Schemas) {
	filename := fmt.Sprintf("%s.%s", projectName, "go")
	file := GetOsFile(dir, filename)
	defer file.Close()
	file.WriteString("// Code generated by codets-apifox. DO NOT EDIT.\n\n")

	file.WriteString(fmt.Sprintf("package %s \n", "types"))

	for name, schema := range schemas {
		_, err := file.WriteString(fmt.Sprintf("type %s struct {\n", name))
		if err != nil {
			panic(err)
		}
		for key, value := range schema.Value.Properties {

			valueTypes := []string{}

			for _, v := range value.Value.Type.Slice() {
				if v == "array" {
					// array类型需要判断items类型
					items := value.Value.Items
					if items.Ref != "" {
						atype := strings.Split(items.Ref, "/")[len(strings.Split(items.Ref, "/"))-1]
						file.WriteString(fmt.Sprintf("  %s []%s `json:\"%s\"`\n", firstUpper(key), atype, key))
					}

					if items.Value.Type.Is("string") {
						file.WriteString(fmt.Sprintf("  %s []string `json:\"%s\"`\n", firstUpper(key), key))
					}
					continue
				}

				if v == "object" {
					// object类型需要判断properties类型
					if value.Ref != "" {
						atype := strings.Split(value.Ref, "/")[len(strings.Split(value.Ref, "/"))-1]
						file.WriteString(fmt.Sprintf("  %s %s `json:\"%s\"`\n", firstUpper(key), atype, key))
					}
					continue
				}

				valueTypes = append(valueTypes, openaiTypesGOMaperts[v])
			}

			// valueTypesStr := strings.Join(valueTypes, " ")
			// 如果有多个类型，则只取第一个类型
			valueTypesStr := ""
			if len(valueTypes) > 0 {
				valueTypesStr = valueTypes[0]
			}

			if valueTypesStr != "" {
				description := value.Value.Description
				if description != "" {
					_, err = file.WriteString(fmt.Sprintf("  // %s\n", description))
					if err != nil {
						panic(err)
					}
				}
				_, err = file.WriteString(fmt.Sprintf("  %s %s `json:\"%s\"`\n", firstUpper(key), valueTypesStr, key))
				if err != nil {
					panic(err)
				}
			}
		}
		_, err = file.WriteString("}\n")
		if err != nil {
			panic(err)
		}
	}
}
